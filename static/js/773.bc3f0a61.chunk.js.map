{"version":3,"file":"static/js/773.bc3f0a61.chunk.js","mappings":"wKACA,EAA0B,yB,UCA1B,EAAgC,gCAAhC,EAAiF,iCAAjF,EAAyH,uBAAzH,EAAyJ,yBAAzJ,EAA6L,2BCA7L,EAAuC,sCAAvC,EAAsG,wCAAtG,EAAqJ,sBAArJ,EAAyL,6B,UCkBzL,EAXqC,SAAC,GAAuB,IAAtBA,EAAqB,EAArBA,UAAWC,EAAU,EAAVA,KAC9C,OACI,gBAAKC,UAAyB,WAAdF,EAAyBG,EAA+BA,EAAxE,UACI,gBAAKD,UAAyB,WAAdF,EAAyBG,EAAaA,EAAtD,SACKF,O,wCCiBXG,GAAgBC,EAAAA,EAAAA,IAAU,IAC1BC,GAAgBC,EAAAA,EAAAA,IAAU,GAsB1BC,GAAmBC,EAAAA,EAAAA,GAAwB,CAC7CC,KAAM,YADeD,EAjBgC,SAACE,GACtD,OACI,kBAAMC,SAAUD,EAAME,aAAcX,UAAWC,EAA/C,WACI,0BACI,SAACW,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GACXC,KAAM,UACNC,YAAa,qBACbhB,UAAWC,EACXgB,SAAU,CAACC,EAAAA,GAAUhB,EAAeE,QAG/C,0BACI,mBAAQJ,UAAWC,EAAnB,0BAShB,EA/CwC,SAAC,GAGO,IAFHkB,EAEE,EAFFA,aACAC,EACE,EADFA,WAQzC,OACI,iBAAKpB,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKkB,EAAaE,KAAI,SAAAC,GAAG,OAAI,SAAC,EAAD,CAAsBxB,UAAWwB,EAAIxB,UAAWC,KAAMuB,EAAIvB,MAA5CuB,EAAIC,UAE/C,SAACjB,EAAD,CAAkBI,SAVJ,SAACc,GACnBC,QAAQC,IAAIF,GACZJ,EAAWI,EAASG,gB,6BCkB5B,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAhBoB,SAACC,GACrB,MAAO,CACHX,aAAcW,EAAMC,YAAYZ,iBAKb,SAACa,GACxB,MAAO,CACHZ,WAAY,SAACO,GACTK,GAASC,EAAAA,EAAAA,GAAiBN,SAOlCO,EAAAA,EAFJ,CAGEC,GCpCF,EAA8B,iCCA9B,EAAyB,uBAAzB,EAAyD,uBAAzD,EAAyF,uB,UCmBzF,EAXoC,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,KAAMrB,EAAkB,EAAlBA,KAAMsB,EAAY,EAAZA,OAC9C,OACI,iBAAKrC,UAAWC,EAAhB,WACI,0BACI,gBAAKD,UAAWC,EAAcqC,IAAKD,EAAQE,IAAK,cAEpD,SAAC,KAAD,CAASC,GAAE,mBAAcJ,GAAQK,gBAAiBxC,EAAlD,SAAiEc,QCgB7E,GAF6Bc,EAAAA,EAAAA,KAXL,SAACC,GACrB,MAAO,CACHY,YAAaZ,EAAMC,YAAYW,gBAKZ,SAACV,GACxB,MAAO,KAGkBH,EApBc,SAAC,GAAmB,IAAlBa,EAAiB,EAAjBA,YACzC,OAAO,gBAAK1C,UAAWC,EAAhB,SACFyC,EAAYrB,KAAI,SAAAsB,GAAG,OAAI,SAAC,EAAD,CAAqBP,KAAMO,EAAIpB,GAAIR,KAAM4B,EAAI5B,KAAMsB,OAAQM,EAAIN,QAAlDM,EAAIpB,YCKjD,EATsC,WAClC,OACI,iBAAKvB,UAAWC,EAAhB,WACI,SAAC,EAAD,KACA,SAAC2C,EAAD","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?dc1e","webpack://samurai-way/./src/components/Dialogs/Messages/Messages.module.css?6fa9","webpack://samurai-way/./src/components/Dialogs/Messages/message/Message.module.css?e2ca","components/Dialogs/Messages/message/Message.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Messages/MessagesContainer.tsx","webpack://samurai-way/./src/components/Dialogs/DialogItems/DialogItems.module.css?770c","webpack://samurai-way/./src/components/Dialogs/DialogItems/Dialog/Dialog.module.css?635e","components/Dialogs/DialogItems/Dialog/Dialog.tsx","components/Dialogs/DialogItems/DialogItems.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__A0Hxc\"};","// extracted by mini-css-extract-plugin\nexport default {\"messagesBlock\":\"Messages_messagesBlock__JTpxU\",\"messageWrapper\":\"Messages_messageWrapper__ZApOV\",\"form\":\"Messages_form__c+jhV\",\"button\":\"Messages_button__figuM\",\"textArea\":\"Messages_textArea__AtZrR\"};","// extracted by mini-css-extract-plugin\nexport default {\"userMessageContainer\":\"Message_userMessageContainer__AJ3Fy\",\"friendMessageContainer\":\"Message_friendMessageContainer__sRJyN\",\"text\":\"Message_text__Se1Y+\",\"userMessage\":\"Message_userMessage__24Ts8\"};","import React, {FC} from 'react';\r\nimport style from  './Message.module.css'\r\nimport {NameStyleMessageType} from \"../../../../redux/dialog-reducer\";\r\n\r\nexport type MessageTypeProps = {\r\n    nameStyle: NameStyleMessageType\r\n    text: string\r\n}\r\nconst Message:FC<MessageTypeProps> = ({nameStyle, text}) => {\r\n    return (\r\n        <div className={nameStyle === 'friend' ? style.friendMessageContainer : style.userMessageContainer}>\r\n            <div className={nameStyle === 'friend' ? style.text : style.userMessage }>\r\n                {text}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, {FC} from 'react';\r\nimport style from './Messages.module.css';\r\nimport Message from \"./message/Message\";\r\nimport {MessagesPropsType} from \"./MessagesContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../../common/FormsControl/FormControls\";\r\nimport {maxLength, minLength, required} from \"../../../utils/validators/validators\";\r\n\r\n\r\nconst Messages: FC<MessagesPropsType> = ({\r\n                                             messagesData,\r\n                                             addMessage,\r\n                                         }) => {\r\n\r\n    const addNewMessage = (formData: FormDataType) => {\r\n        console.log(formData)\r\n        addMessage(formData.message)\r\n    }\r\n    // if (!isAuthUser) return <Redirect to={'./login'} />\r\n    return (\r\n        <div className={style.messagesBlock}>\r\n            <div className={style.messageWrapper}>\r\n                {messagesData.map(mes => <Message key={mes.id} nameStyle={mes.nameStyle} text={mes.text}/>)}\r\n            </div>\r\n            <MessageReduxForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst maxLengthPost = maxLength(30)\r\nconst minLengthPost = minLength(5)\r\n\r\ntype FormDataType = {\r\n    message: string\r\n}\r\nconst MessageForm: FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={style.form}>\r\n            <div>\r\n                <Field component={TextArea}\r\n                       name={\"message\"}\r\n                       placeholder={\"Enter your message\"}\r\n                       className={style.textArea}\r\n                       validate={[required, maxLengthPost, minLengthPost]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button className={style.button}>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst MessageReduxForm = reduxForm<FormDataType>({\r\n    form: \"messages\"\r\n})(MessageForm)\r\n\r\nexport default Messages;","import React, {FC} from 'react';\r\nimport {addMessageAction, MessageType} from \"../../../redux/dialog-reducer\";\r\nimport Messages from \"./Messages\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport withAuthRedirect from \"../../../hoc/withAuthRedirect\";\r\n\r\nexport type MessagesPropsType = MapStateToProps & MapDispatchToPropsType\r\n\r\ntype MapStateToProps = {\r\n    messagesData: Array<MessageType>\r\n\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (message: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        messagesData: state.dialogsPage.messagesData,\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addMessage: (message) => {\r\n            dispatch(addMessageAction(message))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Messages)\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogItems\":\"DialogItems_dialogItems__rOl7q\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"Dialog_dialog__+hTiF\",\"active\":\"Dialog_active__4jGYC\",\"avatar\":\"Dialog_avatar__zUVxr\"};","import React, {FC} from \"react\";\r\nimport style from \"./Dialog.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogTypeProps = {\r\n    path: number\r\n    name: string\r\n    avatar: string\r\n}\r\nconst Dialog: FC<DialogTypeProps> = ({path, name, avatar}) => {\r\n    return (\r\n        <div className={style.dialog}>\r\n            <div>\r\n                <img className={style.avatar} src={avatar} alt={'avatar'} />\r\n            </div>\r\n            <NavLink to={`/message/${path}`} activeClassName={style.active}>{name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import React, {FC} from 'react';\r\nimport style from './DialogItems.module.css'\r\nimport Dialog from \"./Dialog/Dialog\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {DialogType} from \"../../../redux/dialog-reducer\";\r\n\r\ntype DialogsItemsProps = MapStateToPropsType & MapDispatchToProps\r\nconst DialogItems: FC<DialogsItemsProps> = ({dialogsData}) => {\r\n    return <div className={style.dialogItems}>\r\n        {dialogsData.map(obj => <Dialog key={obj.id} path={obj.id} name={obj.name} avatar={obj.avatar}/>)}\r\n    </div>\r\n};\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsData: DialogType[]\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsData: state.dialogsPage.dialogsData\r\n    }\r\n}\r\n\r\ntype MapDispatchToProps = {}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n    return {}\r\n}\r\n\r\nconst DialogItemsContainer = connect(mapStateToProps, mapDispatchToProps)(DialogItems)\r\n\r\nexport default DialogItemsContainer;","import React, {FC} from 'react';\r\nimport style from './Dialogs.module.css'\r\nimport DialogItems from \"./DialogItems/DialogItems\";\r\nimport MessagesContainer from \"./Messages/MessagesContainer\";\r\nimport DialogItemsContainer from \"./DialogItems/DialogItems\";\r\n\r\ntype DialogsPropsType = {}\r\nconst Dialogs: FC<DialogsPropsType> = () => {\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <DialogItemsContainer/>\r\n            <MessagesContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs;"],"names":["nameStyle","text","className","style","maxLengthPost","maxLength","minLengthPost","minLength","MessageReduxForm","reduxForm","form","props","onSubmit","handleSubmit","Field","component","TextArea","name","placeholder","validate","required","messagesData","addMessage","map","mes","id","formData","console","log","message","compose","connect","state","dialogsPage","dispatch","addMessageAction","withAuthRedirect","Messages","path","avatar","src","alt","to","activeClassName","dialogsData","obj","MessagesContainer"],"sourceRoot":""}