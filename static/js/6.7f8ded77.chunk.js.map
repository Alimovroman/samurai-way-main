{"version":3,"file":"static/js/6.7f8ded77.chunk.js","mappings":"+MACA,K,SCAA,EAAyB,4BAAzB,EAAuE,qCAAvE,EAAqH,4BAArH,EAA6J,+BAA7J,EAAqM,4BAArM,EAA0O,4B,8BCmG1O,EAtCqC,SAACA,GAClC,OAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAsCF,EAAAA,EAAAA,UAASD,EAAMI,QAArD,eAAOC,EAAP,KAAoBC,EAApB,KAiBA,OAJAC,EAAAA,EAAAA,YAAU,WACND,EAAeN,EAAMI,UACtB,CAACJ,EAAMI,UAGN,4BACMF,IACE,iBAAKM,UAAWC,EAAhB,WACI,qCAAe,iBAAMC,cAnBZ,WACrBP,GAAY,IAkBe,SAAwCH,EAAMI,QAAU,iBAG9EF,IACG,0BACI,kBAAOS,OArBI,WACvBR,GAAY,GACZH,EAAMY,aAAaP,IAoBAQ,SAlBG,SAACC,GACvBR,EAAeQ,EAAEC,cAAcC,QAkBZA,MAAOX,EACPY,WAAW,U,8BCjCtC,GAJ6BC,EAAAA,EAAAA,GAAgD,CACzEC,KAAM,eADmBD,EA9C8E,SAAC,GAIO,IAHHE,EAGE,EAHFA,YACAC,EAEE,EAFFA,aACAC,EACE,EADFA,MAE5G,OAAKF,GAID,kBAAMG,SAAUF,EAAhB,WACI,mBAAQb,UAAWC,EAAAA,EAAAA,OAAnB,kBACCa,IACG,gBAAKd,UAAWC,EAAAA,EAAAA,iBAAhB,SACKa,KAGT,4BACI,qCADJ,MACuBE,EAAAA,EAAAA,IAAY,YAAa,WAAYC,EAAAA,GAAO,GAAI,GAAI,QAE3E,4BACI,+FADJ,MAC0BD,EAAAA,EAAAA,IAAY,GAAI,iBAAkBC,EAAAA,GAAO,GAAI,GAAI,CAACC,KAAM,iBAElF,4BACI,kDADJ,MAEqBF,EAAAA,EAAAA,IAAY,yBAA0B,4BAA6BG,EAAAA,GAAU,GAAI,GAAI,QAE1G,4BACI,oCADJ,MACsBH,EAAAA,EAAAA,IAAY,WAAY,UAAWC,EAAAA,GAAO,GAAI,GAAI,QAExE,4BACI,uCACCG,OAAOC,KAAKT,EAAYU,UACpBC,KAAI,SAACC,EAAKC,GACH,OAAO,4BACH,uBAAID,IADD,MACYR,EAAAA,EAAAA,IAAYQ,EAAD,mBAAkBA,GAAOP,EAAAA,GAAO,GAAI,GAAI,gBA5BnF,QCuDTS,EAAwC,SAAC,GAA4C,IAA3Cd,EAA0C,EAA1CA,YAAae,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,eAClE,OAAKhB,GAID,2BACKe,IAAW,0BACR,mBAAQE,QAAS,kBAAMD,GAAe,IAAO5B,UAAWC,EAAxD,qBAIJ,0BAAOW,EAAYkB,YAEnB,sCAAclB,EAAYmB,YAC1B,4BACI,uCACCX,OAAOC,KAAKT,EAAYU,UACpBC,KAAI,SAACC,EAAKC,GAAN,OAAY,SAACO,EAAD,CACSC,aAAcT,EACdU,aAActB,EAAYU,SAASE,IAF9BC,UAKvC,iGACmBb,EAAYuB,eAAiB,MAAQ,SAExD,oDAC6BvB,EAAYwB,gCAxBtC,MAkCFJ,EAAgC,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aACzD,OACI,yBACKA,GAAe,iCAAE,uBAAID,IAAN,KAA0BC,KAAmB,QAKzE,EAlGmC,SAAC,GAOO,IANHtB,EAME,EANFA,YACAhB,EAKE,EALFA,OACAQ,EAIE,EAJFA,aACAuB,EAGE,EAHFA,QACAU,EAEE,EAFFA,UACAC,EACE,EADFA,YAEpC,GAAgC7C,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,IAAKiB,EACD,OAAO,SAAC2B,EAAA,EAAD,IAeX,OACI,4BACI,0BACI,gBAAKvC,UAAWC,EAAcuC,IAAK,gGAAiGC,IAAK,cAE7I,0BACI,4BACI,iBAAKzC,UAAWC,EAAhB,WACI,gBAAKuC,IAAK5B,EAAY8B,OAAOC,OAASC,EAAQH,IAAK,SAAUzC,UAAWC,KACxE,yBACK0B,IAAW,kBAAOT,KAAM,OAAQb,SAtBhC,SAACC,GAClBA,EAAEuC,OAAOC,OAASxC,EAAEuC,OAAOC,MAAMC,QACjCV,EAAU/B,EAAEuC,OAAOC,MAAM,KAoBoD9C,UAAWC,UAGhF,SAAC,EAAD,CAAeL,OAAQA,EAAQQ,aAAcA,IAC5CV,GACK,SAAC,EAAD,CAAiBsD,cAAepC,EAAaA,YAAaA,EAAaG,SArB9E,SAACkC,GACZX,EAAYW,GACPC,MAAK,WACFvD,GAAY,UAmBF,SAAC+B,EAAD,CAAad,YAAaA,EAAae,QAASA,EAASC,eAAgBjC,a,UCzDnG,EAA+B,8BAA/B,EAAwE,0BAAxE,EAA8G,2BAA9G,EAAkJ,wBAAlJ,EAAkL,uBCAlL,EAAuB,mBAAvB,EAAkD,oBCmBlD,EAZ0B,SAAC,GAAwB,IAAvBwD,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,QACjC,OACI,iBAAKpD,UAAWC,EAAhB,WACI,gBAAKuC,IAAK,2DAA4DC,IAAK,WAC1EU,GACD,0BACI,kBAAMnD,UAAWC,EAAjB,kBAAoCmD,W,oBCL9CC,EAAUC,EAAAA,MAAW,SAAC9D,GAExB,IACI+D,EAEA/D,EAFA+D,SACAC,EACAhE,EADAgE,QAQJ,OACI,iBAAKxD,UAAWC,EAAhB,WACI,uCAGA,SAACwD,EAAD,CAAsB1C,SAVX,SAACkC,GAChBS,QAAQC,IAAIV,GACZO,EAAQP,EAASW,aASb,gBAAK5D,UAAWC,EAAhB,SACKsD,EAAShC,KAAK,SAAAsC,GAAC,OAAI,SAAC,EAAD,CAAiBV,QAASU,EAAEV,QAASC,QAASS,EAAET,SAArCS,EAAEC,eAM3CC,GAAgBC,EAAAA,EAAAA,IAAU,IAC1BC,GAAgBC,EAAAA,EAAAA,IAAU,GAsB1BT,GAAuB/C,EAAAA,EAAAA,GAAwB,CACjDC,KAAM,WADmBD,EAjBgC,SAAClB,GAC1D,OACI,kBAAMuB,SAAUvB,EAAMqB,aAAcb,UAAWC,EAA/C,WACI,0BACI,SAACkE,EAAA,EAAD,CAAOC,UAAWjD,EAAAA,GACXkD,KAAM,UACNC,YAAa,kBACbC,SAAU,CAACC,EAAAA,GAAUT,EAAeE,GACpCjE,UAAWC,OAGtB,0BACI,mBAAQD,UAAWC,EAAnB,8BAShB,I,SCnCA,GAAewE,EAAAA,EAAAA,KAXS,SAACC,GACrB,MAAO,CACHnB,SAAUmB,EAAMC,YAAYpB,aAGT,SAACqB,GACxB,MAAO,CACHpB,QAAS,SAACqB,GAAD,OAAkBD,GAASE,EAAAA,EAAAA,IAAcD,QAI1D,CAA4DxB,GCI5D,EAfsCC,EAAAA,MAAW,SAAC9D,GAC9C,OACI,iBAAKQ,UAAWC,EAAAA,QAAhB,WACI,SAAC,EAAD,CAAaW,YAAapB,EAAMoB,YACnBe,QAASnC,EAAMmC,QACf/B,OAAQJ,EAAMI,OACdQ,aAAcZ,EAAMY,aACpBiC,UAAW7C,EAAM6C,UACjBC,YAAa9C,EAAM8C,eAEhC,SAACyC,EAAD,U,6BCJNC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAuCD,OAvCCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MAEF,WACI,IAAIC,EAASC,KAAK1F,MAAM2F,MAAMC,OAAOH,OAChCA,IACDA,EAASC,KAAK1F,MAAM6F,iBAAkBC,aAElCJ,KAAK1F,MAAM+F,QAAQC,KAAK,UAGhCN,KAAK1F,MAAMiG,WAAWR,GACtBC,KAAK1F,MAAMkG,UAAUT,KACxB,+BAED,WACIC,KAAKS,mBACR,gCAED,SAAmBC,EAAuCC,EAAyBC,GAE3EF,EAAUT,MAAMC,OAAOH,SAAWC,KAAK1F,MAAM2F,MAAMC,OAAOH,QAC1DC,KAAKS,mBAGZ,oBAED,WACI,OAAKT,KAAK1F,MAAMuG,QAIZ,SAAC,EAAD,CAASnF,YAAasE,KAAK1F,MAAMoB,YACxBe,SAAUuD,KAAK1F,MAAM2F,MAAMC,OAAOH,OAClCrF,OAAQsF,KAAK1F,MAAMI,OACnBQ,aAAc8E,KAAK1F,MAAMY,aACzBiC,UAAW6C,KAAK1F,MAAM6C,UACtBC,YAAa4C,KAAK1F,MAAM8C,eAR1B,SAAC,KAAD,CAAU0D,GAAI,eAW5B,EAvCChB,CAAyB1B,EAAAA,WAiE/B,GAAe2C,EAAAA,EAAAA,KACXxB,EAAAA,EAAAA,KAVoB,SAACC,GACrB,MAAO,CACH9D,YAAa8D,EAAMC,YAAY/D,YAC/BhB,OAAQ8E,EAAMC,YAAY/E,OAC1BmG,OAAQrB,EAAMwB,KAAKH,OACnBV,iBAAkBX,EAAMwB,KAAKpC,MAM7B,CAAC2B,WAAAA,EAAAA,GAAYC,UAAAA,EAAAA,GAAWtF,aAAAA,EAAAA,GAAciC,UAAAA,EAAAA,GAAWC,YAAAA,EAAAA,KACrD6D,EAAAA,GACAC,EAAAA,EAJJ,CAKEpB","sources":["components/Profile/Profile.module.css","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?962c","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?42be","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?e370","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"banner\":\"ProfileInfo_banner__9K+gQ\",\"avatarContainer\":\"ProfileInfo_avatarContainer__yhirU\",\"avatar\":\"ProfileInfo_avatar__yRhC4\",\"inputFile\":\"ProfileInfo_inputFile__17tPf\",\"status\":\"ProfileInfo_status__EMsxT\",\"button\":\"ProfileInfo_button__F216V\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\nimport style from './ProfileInfo.module.css'\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n// class ProfileStatus extends React.Component<PropsType> {\r\n//     state = {\r\n//         editMode: false,\r\n//         statusValue: this.props.status\r\n//     }\r\n//\r\n//     activateEditMode = () => {\r\n//         this.setState({\r\n//             editMode: true\r\n//         })\r\n//     }\r\n//     deactivateEditMode = () => {\r\n//         this.setState({\r\n//             editMode: false\r\n//         })\r\n//         this.props.updateStatus(this.state.statusValue)\r\n//     }\r\n//     changeValueStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n//         this.setState({\r\n//             statusValue: e.currentTarget.value\r\n//         })\r\n//\r\n//     }\r\n//\r\n//     componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n//        if(prevProps.status !== this.state.statusValue) {\r\n//            this.setState({\r\n//                statusValue: prevProps.status\r\n//            })\r\n//        }\r\n//\r\n//     }\r\n//\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 {!this.state.editMode &&\r\n//                     <div>\r\n//                         <span onDoubleClick={this.activateEditMode}>{this.props.status || 'No Status'}</span>\r\n//                     </div>\r\n//                 }\r\n//                 {this.state.editMode &&\r\n//                     <div>\r\n//                         <input  onBlur={this.deactivateEditMode}\r\n//                                 onChange={this.changeValueStatus}\r\n//                                 value={this.state.statusValue}\r\n//                                 autoFocus={true}/>\r\n//                     </div>\r\n//                 }\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\nconst ProfileStatus: FC<PropsType> = (props) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [statusValue, setStatusValue] = useState(props.status)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(statusValue)\r\n    }\r\n    const changeValueStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatusValue(e.currentTarget.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setStatusValue(props.status)\r\n    }, [props.status])\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div className={style.status}>\r\n                    <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || 'No Status'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onBlur={deactivateEditMode}\r\n                           onChange={changeValueStatus}\r\n                           value={statusValue}\r\n                           autoFocus={true}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatus;","import React, {FC} from \"react\";\r\nimport { UserProfileType} from \"../../../redux/profile-reducer\";\r\nimport {createField, Input, TextArea} from \"../../common/FormsControl/FormControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from \"../../common/FormsControl/FormControls.module.css\";\r\n\r\ntype ProfileDataFormType = {\r\n    userProfile: UserProfileType\r\n}\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<UserProfileType, ProfileDataFormType> & ProfileDataFormType> = ({\r\n                                                                                                                userProfile,\r\n                                                                                                                handleSubmit,\r\n                                                                                                                error\r\n                                                                                                            }) => {\r\n    if (!userProfile) {\r\n        return null\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <button className={style.button}>Save</button>\r\n            {error &&\r\n                <div className={style.formSummuryError}>\r\n                    {error}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>Full name</b>: {createField(\"Full name\", \"fullName\", Input, [], '', {})}\r\n            </div>\r\n            <div>\r\n                <b>Поиск работы</b>: {createField(\"\", \"lookingForAJob\", Input, [], '', {type: 'checkbox'})}\r\n            </div>\r\n            <div>\r\n                <b>My professional\r\n                    skills</b>: {createField(\"My professional skills\", \"lookingForAJobDescription\", TextArea, [], '', {})}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: {createField(\"about Me\", \"aboutMe\", Input, [], '', {})}\r\n            </div>\r\n            <div>\r\n                <h3>Contacts :</h3>\r\n                {Object.keys(userProfile.contacts)\r\n                    .map((key, i) => {\r\n                            return <div>\r\n                                <b>{key}</b>: {createField(key, `contacts.${key}`, Input, [], '', {})}\r\n\r\n                            </div>\r\n                        }\r\n                    )}\r\n            </div>\r\n\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataReduxForm = reduxForm<UserProfileType, ProfileDataFormType>({\r\n    form: 'editProfile'\r\n})(ProfileDataForm)\r\n\r\nexport default ProfileDataReduxForm","import React, {ChangeEvent, FC, useState} from 'react';\r\nimport style from \"./ProfileInfo.module.css\";\r\nimport {ContactsType, UserProfileType} from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport avatar from './../../assets/images/user_photo.jpg'\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\ntype PropsType = {\r\n    userProfile: UserProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (formData: UserProfileType) => Promise<void>\r\n}\r\n\r\nconst ProfileInfo: FC<PropsType> = ({\r\n                                        userProfile,\r\n                                        status,\r\n                                        updateStatus,\r\n                                        isOwner,\r\n                                        savePhoto,\r\n                                        saveProfile\r\n                                    }) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    if (!userProfile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const mainFotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const submit = (formData: UserProfileType) => {\r\n        saveProfile(formData)\r\n            .then(() => {\r\n                setEditMode(false)\r\n            })\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className={style.banner} src={'https://catherineasquithgallery.com/uploads/posts/2021-03/1614857449_178-p-fon-okeana-245.jpg'} alt={'banner'}/>\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    <div className={style.avatarContainer}>\r\n                        <img src={userProfile.photos.large || avatar} alt={'photos'} className={style.avatar}/>\r\n                        <div>\r\n                            {isOwner && <input type={\"file\"} onChange={mainFotoSelected} className={style.inputFile}/>}\r\n                        </div>\r\n                    </div>\r\n                    <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n                    {editMode\r\n                        ? <ProfileDataForm initialValues={userProfile} userProfile={userProfile} onSubmit={submit}/>\r\n                        : <ProfileData userProfile={userProfile} isOwner={isOwner} changeEditMode={setEditMode}/>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport type ProfileDataPropsType = {\r\n    userProfile: UserProfileType\r\n    isOwner: boolean\r\n    changeEditMode: (value: boolean) => void\r\n}\r\nconst ProfileData: FC<ProfileDataPropsType> = ({userProfile, isOwner, changeEditMode}) => {\r\n    if (!userProfile) {\r\n        return null\r\n    }\r\n    return (\r\n        <div>\r\n            {isOwner && <div>\r\n                <button onClick={() => changeEditMode(true)} className={style.button}>Edit</button>\r\n            </div>\r\n            }\r\n\r\n            <span>{userProfile.fullName}</span>\r\n\r\n            <p>About me: {userProfile.aboutMe}</p>\r\n            <div>\r\n                <h4>Contacts :</h4>\r\n                {Object.keys(userProfile.contacts)\r\n                    .map((key, i) => <Contact key={i}\r\n                                              contactTitle={key}\r\n                                              contactValue={userProfile.contacts[key as keyof ContactsType]}\r\n                    />)}\r\n            </div>\r\n            <p>\r\n                Поиск работы: {userProfile.lookingForAJob ? 'Yes' : 'No'}\r\n            </p>\r\n            <p>\r\n                My professional skills: {userProfile.lookingForAJobDescription}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string | null\r\n    contactValue: string | null\r\n}\r\nexport const Contact: FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div>\r\n            {contactValue ? <><b>{contactTitle}</b>: {contactValue}</> : null }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"myPostsBlock\":\"MyPosts_myPostsBlock__jRu2K\",\"postForm\":\"MyPosts_postForm__QCWNd\",\"fieldPost\":\"MyPosts_fieldPost__33bpB\",\"button\":\"MyPosts_button__5WxSA\",\"posts\":\"MyPosts_posts__au7Se\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__WyNKr\",\"likes\":\"Post_likes__2+NVn\"};","import React, {FC} from 'react';\r\nimport style from './Post.module.css'\r\nimport {message} from \"antd\";\r\n\r\ntype PostType = {\r\n    message: string\r\n    counter: number\r\n}\r\nconst Post:FC<PostType> = ({message, counter}) => {\r\n    return (\r\n        <div className={style.item}>\r\n            <img src={'https://cs6.pikabu.ru/avatars/398/v398282.jpg?1343863926'} alt={'avatar'} />\r\n            {message}\r\n            <div>\r\n                <span className={style.likes}>like {counter}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React, {FC} from 'react';\r\nimport style from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLength, minLength, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControl/FormControls\";\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    let {\r\n        postData,\r\n        addPost,\r\n    } = props;\r\n\r\n    const addNewPost = (formData: FormDataType) => {\r\n        console.log(formData)\r\n        addPost(formData.newPost)\r\n    }\r\n\r\n    return (\r\n        <div className={style.myPostsBlock}>\r\n            <div>\r\n                My posts\r\n            </div>\r\n            <MessagePostReduxForm onSubmit={addNewPost}/>\r\n            <div className={style.posts}>\r\n                {postData.map((p => <Post key={p.id} message={p.message} counter={p.counter}/>))}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nconst maxLengthPost = maxLength(30)\r\nconst minLengthPost = minLength(5)\r\n\r\ntype FormDataType = {\r\n    newPost: string\r\n}\r\nconst MessagePostForm: FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={style.postForm}>\r\n            <div>\r\n                <Field component={TextArea}\r\n                       name={\"newPost\"}\r\n                       placeholder={\"Enter your post\"}\r\n                       validate={[required, maxLengthPost, minLengthPost]}\r\n                       className={style.fieldPost}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button className={style.button}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst MessagePostReduxForm = reduxForm<FormDataType>({\r\n    form: \"newPost\"\r\n})(MessagePostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostAction, PostType} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    postData: PostType[]\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: (post: string) => void\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        postData: state.profilePage.postData,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (post: string) => dispatch(addPostAction(post)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React, {FC} from 'react';\r\nimport style from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {UserProfileType} from \"../../redux/profile-reducer\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    userProfile: UserProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (formData: UserProfileType) => Promise<void>\r\n}\r\nconst Profile: FC<ProfilePropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={style.profile}>\r\n            <ProfileInfo userProfile={props.userProfile}\r\n                         isOwner={props.isOwner}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Profile;","import React, {FC} from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getProfile,\r\n    getStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateStatus,\r\n    UserProfileType\r\n} from \"../../redux/profile-reducer\";\r\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToProps & RouteComponentProps<PathParamsType>\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId!.toString()\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        // debugger\r\n        if (prevProps.match.params.userId !== this.props.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.isAuth) {\r\n            return <Redirect to={'/login'}/>\r\n        }\r\n        return (\r\n            <Profile userProfile={this.props.userProfile}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    userProfile: UserProfileType\r\n    status: string\r\n    isAuth: boolean\r\n    authorizedUserId: number | null\r\n\r\n}\r\ntype MapDispatchToProps = {\r\n    getProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (formData: UserProfileType) => Promise<void>\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        userProfile: state.profilePage.userProfile,\r\n        status: state.profilePage.status,\r\n        isAuth: state.auth.isAuth,\r\n        authorizedUserId: state.auth.id\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,\r\n        {getProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n"],"names":["props","useState","editMode","setEditMode","status","statusValue","setStatusValue","useEffect","className","style","onDoubleClick","onBlur","updateStatus","onChange","e","currentTarget","value","autoFocus","reduxForm","form","userProfile","handleSubmit","error","onSubmit","createField","Input","type","TextArea","Object","keys","contacts","map","key","i","ProfileData","isOwner","changeEditMode","onClick","fullName","aboutMe","Contact","contactTitle","contactValue","lookingForAJob","lookingForAJobDescription","savePhoto","saveProfile","Preloader","src","alt","photos","large","avatar","target","files","length","initialValues","formData","then","message","counter","MyPosts","React","postData","addPost","MessagePostReduxForm","console","log","newPost","p","id","maxLengthPost","maxLength","minLengthPost","minLength","Field","component","name","placeholder","validate","required","connect","state","profilePage","dispatch","post","addPostAction","MyPostsContainer","ProfileContainer","userId","this","match","params","authorizedUserId","toString","history","push","getProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","isAuth","to","compose","auth","withRouter","withAuthRedirect"],"sourceRoot":""}