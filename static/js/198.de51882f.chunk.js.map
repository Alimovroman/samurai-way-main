{"version":3,"file":"static/js/198.de51882f.chunk.js","mappings":"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","sources":["components/Profile/Profile.module.css","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?962c","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/MyPosts.module.css","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?e370","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"banner\":\"ProfileInfo_banner__9K+gQ\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n// class ProfileStatus extends React.Component<PropsType> {\r\n//     state = {\r\n//         editMode: false,\r\n//         statusValue: this.props.status\r\n//     }\r\n//\r\n//     activateEditMode = () => {\r\n//         this.setState({\r\n//             editMode: true\r\n//         })\r\n//     }\r\n//     deactivateEditMode = () => {\r\n//         this.setState({\r\n//             editMode: false\r\n//         })\r\n//         this.props.updateStatus(this.state.statusValue)\r\n//     }\r\n//     changeValueStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n//         this.setState({\r\n//             statusValue: e.currentTarget.value\r\n//         })\r\n//\r\n//     }\r\n//\r\n//     componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n//        if(prevProps.status !== this.state.statusValue) {\r\n//            this.setState({\r\n//                statusValue: prevProps.status\r\n//            })\r\n//        }\r\n//\r\n//     }\r\n//\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 {!this.state.editMode &&\r\n//                     <div>\r\n//                         <span onDoubleClick={this.activateEditMode}>{this.props.status || 'No Status'}</span>\r\n//                     </div>\r\n//                 }\r\n//                 {this.state.editMode &&\r\n//                     <div>\r\n//                         <input  onBlur={this.deactivateEditMode}\r\n//                                 onChange={this.changeValueStatus}\r\n//                                 value={this.state.statusValue}\r\n//                                 autoFocus={true}/>\r\n//                     </div>\r\n//                 }\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\nconst ProfileStatus: FC<PropsType> = (props) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [statusValue, setStatusValue] = useState(props.status)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(statusValue)\r\n    }\r\n    const changeValueStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatusValue(e.currentTarget.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setStatusValue(props.status)\r\n    }, [props.status])\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || 'No Status'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onBlur={deactivateEditMode}\r\n                           onChange={changeValueStatus}\r\n                           value={statusValue}\r\n                           autoFocus={true}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatus;","import React, {FC} from 'react';\r\nimport style from \"./ProfileInfo.module.css\";\r\nimport {UserProfileType} from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport avatar from './../../assets/images/user_photo.jpg'\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\ntype PropsType = {\r\n    userProfile: UserProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\nconst ProfileInfo: FC<PropsType> = ({userProfile, status, updateStatus}) => {\r\n    if (!userProfile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className={style.banner} src={'https://kipmu.ru/wp-content/uploads/rost.jpg'} alt={'banner'}/>\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    <img src={userProfile.photos.large ? userProfile.photos.large : avatar} alt={'photos'}/>\r\n                </div>\r\n                <span>{userProfile.fullName}</span>\r\n                <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n                <p>{userProfile.aboutMe}</p>\r\n                <div>\r\n                    <h3>Contacts</h3>\r\n                    <p>{userProfile.contacts.vk}</p>\r\n                    <p>{userProfile.contacts.instagram}</p>\r\n                    <p>{userProfile.contacts.facebook}</p>\r\n                    <p>{userProfile.contacts.website}</p>\r\n                    <p>{userProfile.contacts.twitter}</p>\r\n                    <p>{userProfile.contacts.mainLink}</p>\r\n                    <p>{userProfile.contacts.youtube}</p>\r\n                </div>\r\n                <p>\r\n                    Поиск работы: {userProfile.lookingForAJob ? 'Yes' : 'No'}\r\n                </p>\r\n                <p>\r\n                    {userProfile.lookingForAJobDescription}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__WyNKr\"};","import React, {FC} from 'react';\r\nimport style from './Post.module.css'\r\nimport {message} from \"antd\";\r\n\r\ntype PostType = {\r\n    message: string\r\n    counter: number\r\n}\r\nconst Post:FC<PostType> = ({message, counter}) => {\r\n    return (\r\n        <div className={style.item}>\r\n            <img src={'https://cs6.pikabu.ru/avatars/398/v398282.jpg?1343863926'} alt={'avatar'} />\r\n            {message}\r\n            <div>\r\n                <span>like{counter}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React, {FC} from 'react';\r\nimport style from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLength, minLength, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControl/FormControls\";\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    let {\r\n        postData,\r\n        addPost,\r\n    } = props;\r\n\r\n    const addNewPost = (formData: FormDataType) => {\r\n        console.log(formData)\r\n        addPost(formData.newPost)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                My posts\r\n            </div>\r\n            <MessagePostReduxForm onSubmit={addNewPost}/>\r\n            <div className={style.posts}>\r\n                {postData.map((p => <Post key={p.id} message={p.message} counter={p.counter}/>))}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nconst maxLengthPost = maxLength(30)\r\nconst minLengthPost = minLength(5)\r\n\r\ntype FormDataType = {\r\n    newPost: string\r\n}\r\nconst MessagePostForm: FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea}\r\n                       name={\"newPost\"}\r\n                       placeholder={\"Enter your post\"}\r\n                       validate={[required, maxLengthPost, minLengthPost]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst MessagePostReduxForm = reduxForm<FormDataType>({\r\n    form: \"newPost\"\r\n})(MessagePostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostAction, PostType} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    postData: PostType[]\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: (post: string) => void\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        postData: state.profilePage.postData,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (post: string) => dispatch(addPostAction(post)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React, {FC} from 'react';\r\nimport style from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {UserProfileType} from \"../../redux/profile-reducer\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    userProfile: UserProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\nconst Profile: FC<ProfilePropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={style.profile}>\r\n            <ProfileInfo userProfile={props.userProfile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Profile;","import React, {FC} from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getProfile, getStatus, updateStatus, UserProfileType} from \"../../redux/profile-reducer\";\r\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToProps & RouteComponentProps<PathParamsType>\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId!.toString()\r\n            if(!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.isAuth) {\r\n            return <Redirect to={'/login'} />\r\n        }\r\n        return (\r\n            <Profile userProfile={this.props.userProfile} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    userProfile: UserProfileType\r\n    status: string\r\n    isAuth: boolean\r\n    authorizedUserId: number | null\r\n\r\n}\r\ntype MapDispatchToProps = {\r\n    getProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        userProfile: state.profilePage.userProfile,\r\n        status: state.profilePage.status,\r\n        isAuth: state.auth.isAuth,\r\n        authorizedUserId: state.auth.id\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,\r\n        {getProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n"],"names":["props","useState","editMode","setEditMode","status","statusValue","setStatusValue","useEffect","onDoubleClick","onBlur","updateStatus","onChange","e","currentTarget","value","autoFocus","userProfile","className","style","src","alt","photos","large","avatar","fullName","aboutMe","contacts","vk","instagram","facebook","website","twitter","mainLink","youtube","lookingForAJob","lookingForAJobDescription","Preloader","message","counter","MyPosts","React","postData","addPost","MessagePostReduxForm","onSubmit","formData","console","log","newPost","map","p","id","maxLengthPost","maxLength","minLengthPost","minLength","reduxForm","form","handleSubmit","Field","component","TextArea","name","placeholder","validate","required","connect","state","profilePage","dispatch","post","addPostAction","MyPostsContainer","ProfileContainer","userId","this","match","params","authorizedUserId","toString","history","push","getProfile","getStatus","isAuth","to","compose","auth","withRouter","withAuthRedirect"],"sourceRoot":""}